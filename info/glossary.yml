- key: absolute_error
  en:
    term: absolute error
    def: >
      The absolute value of the difference between the observed and the correct
      value. Absolute error is usually less useful than [relative
      error](#relative_error).
  es:
    term: error absoluto
    def: >
      El valor absoluto de la diferencia entre el valor obsevado y el correcto.
      El error absoluto es normalmente menos útil que el [error relativo](#relative_error)
      
- key: absolute_path
  ref:
  - relative_path
  en:
    term: absolute path
    def: >
      A path that points to the same location in the [filesystem](#filesystem)
      regardless of where it is evaluated. An absolute path is the equivalent of
      latitude and longitude in geography.
  es:
    term: ruta absoluta
    def: >
      Una ruta apuntando a la misma ubicación en el [sistema de archivos](#filesystem)
      sin importar donde es evaluada. Una ruta absoluta es el equivalente a
      longitud y latitud en geografía.

- key: abstract_method
  en:
    term: abstract method
    def: >
      In [object-oriented programming](#oop), a [method](#method) that is
      defined but not implemented. Programmers will define an abstract method in
      a [parent class](#parent_class) to specify operations that [child
      classes](#child_class) must provide.
  es:
    term: método abstracto 
    def: >
      En [programación orientada a objetos](#oop), un [método](#method) que se define
      pero no se implementa. Los programadores definirán un método abstracto en
      una [super clase](#parent_class) para especificar operaciones que las
      [subclases] (#child_class) deben proveer.

- key: abstract_syntax_tree
  en:
    term: abstract syntax tree
    def: >
      A deeply nested data structure, or [tree](#tree), that represents the
      structure of a program. For example, the AST might have a [node](#node)
      representing a `while` loop with one [child](#child_tree) representing the
      loop condition and another representing the [loop body](#loop_body).
    acronym: AST
  es:
    term: árbol de sintaxis abstracta
    def: >
      Una estructura de datos super anidada, o [árbol](#tree), que representa 
      la estructura de un programa

- key: accidental_complexity
  en:
    term: accidental complexity
    def: >
      The extra (avoidable) complexity introduced by poor design choices.
      The term is used in contrast with
      [intrinsic complexity](#intrinsic_complexity).
  es:
    term: complejidad acccidental 
    def: >
     La complejidad (inevitable) extra introducida por decisiones de diseño pobres.
     El término se usa en contraste con [complejidad intrínseca](#intrinsic_complexity).

- key: accumulator
  en:
    term: accumulator
    def: >
      A variable that collects and/or combines many values.  For example, if a
      program sums the values in an array by adding them all to a variable
      called `result`, then `result` is the accumulator.
  es:
    term: acumulador 
    def: >
      Una variable que colecta y/o combina muchos valores. Por ejemplo, si un
      programa suma los valores de un arreglo, adicionándolos todos en una variable
      llamada `resultado`, entonces `resultado` es el acumulador. 

- key: actual_result
  en:
    term: actual result (of test)
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test [passes](#pass_test); if the
      two are different, the test [fails](#fail_test).
  es:
    term: resultado actual (de prueba)
    def: >
      El valor generado al ejecutar código en una prueba. Si coincide
      con el [valor esperado](#expected_result), la prueba [pasa](#pass_test); 
      si difieren, la prueba [falla](#fail_test)


- key: adapter_pattern
  en:
    term: Adapter pattern
    def: >
      A [design pattern](#design_pattern) that rearranges parameters, provides
      extra values, or does other work so that one function can be called by
      another.
  es:
    term: patrón Adaptador 
    def: >
      Un [patrón de diseño](#design_pattern) que reacomoda parámetros, provee
      valores adicionales, o hace otras cosas para que una función pueda ser
      llamada por otra.

- key: alias
  en:
    term: alias
    def: >
      A second or subsequent reference to the same object. Aliases are useful,
      but increase the [cognitive load](#cognitive_load) on readers who have to
      remember that all these names refer to the same thing.
  es:
    term: alias 
    def: >
      Una segunda referencia o subsecuente al mismo objeto. Los aliases son útiles,
      pero incrementan la [carga cognitiva](#cognitive_load) en lectores,
        quienes deben recordar todos los nombres que se refieren a la misma cosa.

- key: anonymous_function
  en:
    term: anonymous function
    def: >
      A function that has not been assigned a name. Anonymous functions are
      usually quite short, and are usually defined where they are used, e.g., as
      callbacks. In Python, these are called lambda functions and are
      created through use of the lambda reserved word.
  es:
    term: función anónima
    def: >
      Una función a la que no se le ha asignado un nombre. Las funciones anónimas
      son bastante cortas, y usualmente están son definidas donde se usan, e.g.,
      como retrollamadas. En Python, estas son llamadas funciones lambda, y son
      creadas mediante la palabra reservada lambda.

- key: abi
  en:
    term: Application Binary Interface
    def: >
      The low-level layout that a piece of software must have to work on a
      particular kind of machine.
    acronym: ABI
  es:
    term: Interfaz binaria de aplicación
    def: >
      El plan de bajo nivel que una pieza de software debe tener para funcionar
      en un tipo específico de máquina.
      

- key: api
  en:
    term: Application Programming Interface
    def: >
      A set of functions provided by a software library or web service that
      other software can call.
    acronym: API
  es:
    term: Interfaz de programación de aplicación 
    def: >
       Un conjunto de funciones provistas en una librería de software
       o servicio web que otro software puede llamar.

- key: argument
  ref:
  - parameter
  en:
    term: argument
    def: >
      A value passed to a function when it is called.
  es:
    term: argumento
    def: >
      Un valor pasado a una función cuando es llamada.

- key: ascii
  en:
    term: ASCII
    def: >
      A standard way to represent the characters commonly used in the Western
      European languages as 7- or 8-bit integers, now largely superceded by
      [Unicode](#unicode).
  break: true
  es:
    term: ASCII
    def: >
      Una forma estándar de presentar caracteres usada comunmente en
      los lenguajes europeos occidentales como enteros de 7 u 8 bits,
      ahora reemplazado en su mayoría por [Unicode](#unicode).

- key: assembler
  ref:
  - disassembler
  en:
    term: assembler
    def: >
      A [compiler](#compiler) that translates software written in [assembly
      code](#assembly_code) into machine instructions.
  es:
    term: ensamblador 
    def: >
      Un [compilador](#compiler) que traduce software escrito en [código ensamblador]
      (#assembly_code) en instrucciones máquina.

- key: assembly_code
  en:
    term: assembly code
    def: >
      A low-level programming language whose statements correspond closely to
      the actual [instruction set](#instruction_set) of a particular kind of
      processor.
  es:
    term: código ensamblado 
    def: >
      Un lenguaje de programación a bajo nivel cuyas sentencias corresponden
      cercanamente al [set de instrucciones](#instruction_set) de un tipo
      específico de procesador.

- key: assertion
  en:
    term: assertion
    def: >
      A [Boolean](#boolean) expression that must be true at a certain point in a
      program. Assertions may be built into the language (e.g., Python's
      `assert` statement) or provided as functions (as with Node's `assert`
      library).
  es:
    term: aserción 
    def: >
      Una expresión  [Booleana](#boolean)  que debe ser cierta en cierto punto
      de un programa. Las aserciones pueden estar en el lenguage (e.g. la palabra
      `assert` de Python) o provistas como funciones (como la librería `assert`
      en Node)

- key: associative_array
  en:
    term: associative array
    def: >
      See [dictionary](#dictionary).
  es:
    term: arreglo asociativo 
    def: >
      Ver [diccionario](#dictionary).

- key: asynchronous
  ref:
  - synchronous
  en:
    term: asynchronous
    def: >
      Not happening at the same time. In programming, an asynchronous operation
      is one that runs independently of another, or that starts at one time and
      ends at another.
  es:
    term: asíncrono 
    def: >
      Que no ocurre al mismo tiempo. En programación, una operación asíncrona
      es la que ejecuta independiente de otra, o que inicia en un momento 
      y termina en otro.

- key: attribute
  en:
    term: attribute
    def: >
      A name-value pair associated with an object, used to store metadata about
      the object such as an array's dimensions.
  es:
    term: atributo 
    def: >
      Un par nombre-valor asociado con un objeto, usado para almacenar metadatos
      sobre el objecto, como las dimensiones de un arreglo.

- key: automatic_variable
  ref:
  - makefile
  en:
    term: automatic variable
    def: >
      A variable that is automatically given a value in a [build
      rule](#build_rule). For example, Make automatically assigns the name of a
      rule's [target](#build_target) to the automatic variable `$@`. Automatic
      variables are frequently used when writing [pattern rules](#pattern_rule).
  es:
    term: variable automática 
    def: >
      Una variable que recinbe automáticamente un valor en una [regla de 
      construcción](#build_rule). Por ejemplo, Make asigna automáticamente el nombre 
      de un [objetivo](#build_target) de regla a la variable automática `$@`. Las
      variables automáticas son usadas frecuentementes al escribir [reglas de patrón]
      (#pattern_rule).

- key: backward_compatible
  en:
    term: backward-compatible
    def: >
      A property of a system that enables interoperability with an older legacy
      system, or with input designed for such a system.
  es:
    term: compatible en reversa
    def: >
      Una propiedad del sistema que permite interoperabilidad con un sistema
      más antiguo, o con la entrada diseñada para tal sistema.

- key: bare_object
  en:
    term: bare object
    def: >
      An object that isn't an instance of any particular class.
  es:
    term: objeto al descubierto
    def: >
      Un objeto que no es instancia de alguna clase en particular. 

- key: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: base class
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which other
      classes are derived.
  es:
    term: clase base
    def: >
      En [programación orientada a objetos](#oop), una [clase](#class) desde la
      cual otras clases se derivan.

- key: binary
  en:
    term: binary
    def: >
      A system which can have one of two possible states, often represented as 0
      and 1 or true and false.
  es:
    term: binario
    def: >
      Un sistema que puede tener uno de dos estados posibles, a menudo representado
      como 0 y 1 o verdadero y falso.

- key: bit
  ref:
  - binary
  - boolean
  en:
    term: bit
    def: >
      A single binary digit (0 or 1).
  es:
    term: bit
    def: >
      Un solo dígito binario: 0 o 1. 

- key: bitwise_operation
  en:
    term: bitwise operation
    def: >
      An operation that manipulates individual bits in memory. Common bitwise
      operations include `and`, `or`, `not`, and `xor`.
  es:
    term: operación bit a bit 
    def: >
      Una operación que manipula bits individuales en memoria. Operaciones bit
      a bit comunes incluyen: `and`, `or`, `not`, y `xor`.

- key: block_comment
  en:
    term: block comment
    def: >
      A [comment](#comment) that spans multiple lines. Block comments may be
      marked with special start and end symbols, like `/*` and `*/` in C and its
      descendents, or each line may be prefixed with a marker like `#`.
  es:
    term: comentario en bloque 
    def: >
      Un [comentario](#comment) que abarca varias líneas. Los comentarios en bloque
      pueden marcarse con símbolos especiales de inicio y fin, como `/*` and `*/` en C
      y sus descendientes, o cada línea inicia con un marcador como `#`.

- key: boolean
  en:
    term: Boolean
    def: >
      Relating to a variable or data type that can have either a logical value
      of true or false. Named for George Boole, a 19th century mathematician.
  es:
    term: Booleano 
    def: >
      Relativo a una variable o tipo de dato que puede tener un valor lógico
      de verdadero o falso. Nombrado por George Boole, un matemático del s. XIX.

- key: breadth_first
  ref:
  - depth_first
  en:
    term: breadth first
    def: >
      To go through a nested data structure such as a [tree](#tree) by exploring
      all of one level, then going on to the next level and so on, or to explore
      a problem by examining the first step of each possible solution, and then
      trying the next step for each.
  es:
    term: anchura primero 
    def: >
     Recorrer una estructura de datos anidad como un [árbol](#tree) explorando
     todo un nivel, luego bajando al siguiente y así en sucesivo, o explorar
     un problema examinando el primer paso de cada solución posible, intentando
     luego el siguien paso de cada una.

- key: breakpoint
  ref:
  - watchpoint
  en:
    term: breakpoint
    def: >
      An instruction to a debugger telling it to suspend execution whenever a
      specific point in the program (such as a particular line) is reached.
  es:
    term: punto de ruptura 
    def: >
      Una instrucción al depurador para indicar que suspenda la ejecución cuando
      se alcance un punto específico en el programa (una línea en particular).

- key: bug
  en:
    term: bug
    def: >
      A missing or undesirable [feature](#feature_software) of a piece of
      software.
  es:
    term: error
    def: >
      Una [característica](#feature_software) indeseable o faltante en una pieza 
      de software.

- key: build_manager
  ref:
  - build_rule
  - dependency
  - makefile
  en:
    term: build manager
    def: >
      A program that keeps track of how files depend on one another and runs
      commands to update any files that are out-of-date. Build managers were
      invented to [compile](#compile) only those parts of programs that had
      changed, but are now often used to implement workflows in which plots
      depend on results files, which in turn depend on raw data files or
      configuration files.
  es:
    term: gestor de compilación 
    def: >
      Un programa que determina como los archivos dependen entre sí y ejecuta
      comandos para actualizar los que están obsoletos. Los gestores de compilación
      se inventaron para [compilar](#compile) solo las partes de programas que
      cambiaban, pero a menudo ahora se usan para implementar flujos en los que los
      grafos dependen de los archivos de resultados, que a su vez dependen de
      archivos de datos crudos, o archivos de configuración.*

- key: build_recipe
  en:
    term: build recipe
    def: >
      The part of a [build rule](#build_rule) that describes how to update
      something that has fallen out-of-date.
  es:
    term: receta de compilación 
    def: >
      La parte de una [regla de compilación](#build_rule) que describe cómo
      actualizar algo que ha quedado desactualizado.

- key: build_rule
  en:
    term: build rule
    def: >
      A specification for a [build manager](#build_manager) that describes how
      some files depend on others and what to do if those files are out-of-date.
  es:
    term: regla de construcción 
    def: >
      Una especificación para un [gestor de compilación](#build_manager) que
      describe cómo algunos archivos dependen de otros y que hacer si esos
      archivos están desactualizados.

- key: build_target
  ref:
  - makefile
  en:
    term: build target
    def: >
      The file(s) that a [build rule](#build_rule) will update if they are
      out-of-date compared to their [dependencies](#dependency).
  es:
    term: objetivo de compilación
    def: >
      Los archivos que una [regla de compilación](#build_rule) actualizará
      si están desactializados en comparación a sus [dependencias](#dependency).

- key: byte_code
  en:
    term: byte code
    def: >
      A set of instructions designed to be executed efficiently by an
      [interpreter](#interpreter).
  es:
    term: FIXME
    def: >
      FIXME

- key: cache
  en:
    term: cache
    def: >
      Something that stores copies of data so that future requests for it can be
      satisfied more quickly. The CPU in a computer uses a hardware cache to
      hold recently-accessed values; many programs rely on a software cache to
      reduce network traffic and latency. Figuring out when something in a cache
      is out-of-date and should be replaced is one of the [two hard problems in
      computer science](#two_hard_problems).
  es:
    term: FIXME
    def: >
      FIXME

- key: caching
  en:
    term: caching
    def: >
      To save a copy of some data in a local [cache](#cache) to make future
      access faster.
  es:
    term: FIXME
    def: >
      FIXME

- key: call_stack
  en:
    term: call stack
    def: >
      A data structure that stores information about the active subroutines
      executed.
  es:
    term: FIXME
    def: >
      FIXME

- key: callback
  en:
    term: callback function
    def: >
      A function A that is passed to another function B so that B can call it at
      some later point. Callbacks can be used [synchronously](#synchronous), as
      in generic functions like `map` that invoke a callback function once for
      each element in a collection, or [asynchronously](#asynchronous), as in a
      [client](#client) that runs a callback when a [response](#http_response)
      is received in answer to a [request](#http_request).
  es:
    term: FIXME
    def: >
      FIXME

- key: css
  en:
    term: Cascading Style Sheets
    def: >
      A way to control the appearance of HTML. CSS is typically used to specify
      fonts, colors, and layout.
    acronym: CSS
  es:
    term: FIXME
    def: >
      FIXME

- key: catch_exception
  en:
    term: catch (an exception)
    def: >
      To handle an error or other unexpected event represented by an
      [exception](#exception).
  es:
    term: FIXME
    def: >
      FIXME

- key: chain_of_responsibility_pattern
  en:
    term: Chain of Responsibility pattern
    def: >
      A [design pattern](#design_pattern) in which each [object](#object) either
      handles a request or passes it on to another object.
  es:
    term: FIXME
    def: >
      FIXME

- key: character_encoding
  en:
    term: character encoding
    def: >
      A specification of how characters are stored as bytes. The most
      commonly-used encoding today is [UTF-8](#utf_8).
  es:
    term: FIXME
    def: >
      FIXME

- key: child_tree
  en:
    term: child (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is below another node (call the
      [parent](#parent_tree)).
  es:
    term: FIXME
    def: >
      FIXME

- key: child_class
  en:
    term: child class
    def: >
      In [object-oriented programming](#oop), a [class](#class) derived from
      another class (called the [parent class](#parent_class)).
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: circular_dependency
  en:
    term: circular dependency
    def: >
      A situation in which X depends on Y and Y depends on X, either directly or
      indirectly. If there is a circular dependency, then the [dependency
      graph](#dependency_graph) is not [acyclic](#dag).
  es:
    term: FIXME
    def: >
      FIXME

- key: class
  en:
    term: class
    def: >
      In [object-oriented programming](#oop), a structure that combines data and
      operations (called [methods](#method)). The program then uses a
      [constructor](#constructor) to create an [object](#object) with those
      properties and methods. Programmers generally put generic or reusable
      behavior in [parent classes](#parent_class), and more detailed or specific
      behavior in [child classes](#child_class).
  es:
    term: FIXME
    def: >
      FIXME

- key: client
  en:
    term: client
    def: >
      A program such as a web browser that gets data from a [server](#server)
      and displays it to, or interacts with, users. The term is used more
      generally to refer to any program A that makes requests of another program
      B. A single program can be both a client and a server.
  es:
    term: FIXME
    def: >
      FIXME

- key: closure
  en:
    term: closure
    def: >
      A set of variables defined in the same [scope](#scope) whose existence has
      been preserved after that scope has ended.
  es:
    term: FIXME
    def: >
      FIXME

- key: code_coverage
  en:
    term: code coverage (in testing)
    def: >
      How much of a [library](#library) or program is executed when tests run.
      This is normally reported as a percentage of lines of code.
  es:
    term: FIXME
    def: >
      FIXME

- key: cognitive_load
  en:
    term: cognitive load
    def: >
      The amount of working memory needed to accomplish a set of simultaneous
      tasks.
  es:
    term: FIXME
    def: >
      FIXME

- key: collision
  en:
    term: collision
    def: >
      A situation in which a program tries to store two items in the same
      location in memory. For example, a collision occurs when a [hash
      function](#hash_function) generates the same [hash code](#hash_code) for
      two different items.
  es:
    term: FIXME
    def: >
      FIXME

- key: column_major
  ref:
  - row_major
  en:
    term: column-major storage
    def: >
      Storing each column of a two-dimensional array as one block of memory so
      that elements in the same row are far apart.
  es:
    term: FIXME
    def: >
      FIXME

- key: combinatorial_explosion
  en:
    term: combinatorial explosion
    def: >
      The exponential growth in the size of a problem or the time required to
      solve it that arises when all possible combinations of a set of items must
      be searched.
  es:
    term: FIXME
    def: >
      FIXME

- key: csv
  en:
    term: comma-separated values
    def: >
      A text format for tabular data in which each [record](#record) is one row
      and [fields](#field) are separated by commas. There are many minor
      variations, particularly around quoting of [strings](#string).
    acronym: CSV
  es:
    term: FIXME
    def: >
      FIXME

- key: command_line_argument
  en:
    term: command-line argument
    def: >
      A filename or control flag given to a command-line program when it is run.
  es:
    term: FIXME
    def: >
      FIXME

- key: cli
  en:
    term: command-line interface
    def: >
      A user interface that relies solely on text for commands and output,
      typically running in a [shell](#shell).
    acronym: CLI
  es:
    term: FIXME
    def: >
      FIXME

- key: comment
  en:
    term: comment
    def: >
      Text written in a script that is not treated as code to be run, but rather
      as text that describes what the code is doing. These are usually short
      notes, often beginning with a `#` (in many programming languages).
  es:
    term: FIXME
    def: >
      FIXME

- key: compile
  en:
    term: compile
    def: >
      To translate textual source into another form. Programs in [compiled
      languages](#compiled_language) are translated into machine instructions
      for a computer to run, and [Markdown](#markdown) is usually translated
      into [HTML](#html) for display.
  es:
    term: FIXME
    def: >
      FIXME

- key: compiled_language
  en:
    term: compiled language
    def: >
      Originally, a language such as C or Fortran that is translated into
      machine instructions for execution. Languages such as Java are also
      compiled before execution, but into [byte code](#byte_code) instead of
      machine instructions, while [interpreted languages](#interpreted_language)
      like JavaScript are compiled to byte code on the fly.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: compiler
  en:
    term: compiler
    def: >
      An application that translates programs written in some languages into
      machine instructions or [byte code](#byte_code).
  es:
    term: FIXME
    def: >
      FIXME

- key: confirmation_bias
  en:
    term: confirmation bias
    def: >
      The tendency for someone to look for evidence that they are right rather
      than searching for reasons why they might be wrong.
  es:
    term: FIXME
    def: >
      FIXME

- key: console
  en:
    term: console
    def: >
      A computer terminal where a user may enter commands, or a program, such as
      a shell that simulates such a device.
  es:
    term: FIXME
    def: >
      FIXME

- key: constructor
  en:
    term: constructor
    def: >
      A function that creates an [object](#object) of a particular
      [class](#class).
  es:
    term: FIXME
    def: >
      FIXME

- key: utc
  en:
    term: Coordinated Universal Time
    def: >
      The standard time against which all others are defined. UTC is the time at
      longitude 0°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.
    acronym: UTC
  es:
    term: FIXME
    def: >
      FIXME

- key: corner_case
  en:
    term: corner case
    def: >
      Another name for an [edge case](#edge_case).
  es:
    term: FIXME
    def: >
      FIXME

- key: coupling
  en:
    term: coupling
    def: >
      The degree of interaction between two [classes](#class),
      [modules](#module), or other software components. If a system's components
      are [loosely coupled](#loosely_coupled), changes to one are unlikely to
      affect others.  If they are [tightly coupled](#tightly_coupled), then any
      change requires other changes elsewhere, which complicates maintenance and
      evolution.
  es:
    term: FIXME
    def: >
      FIXME

- key: cryptographic_hash_function
  en:
    term: cryptographic hash function
    def: >
      A [hash function](#hash_function) that produces an apparently-random value
      for any input.
  es:
    term: FIXME
    def: >
      FIXME

- key: current_working_directory
  en:
    term: current working directory
    def: >
      The [folder](#folder) or [directory](#directory) location in which the
      program operates. Any action taken by the program occurs relative to this
      directory.
  es:
    term: FIXME
    def: >
      FIXME

- key: cycle
  en:
    term: cycle (in a graph)
    def: >
      A set of links in a graph that leads from a node back to itself.
  es:
    term: FIXME
    def: >
      FIXME

- key: data_frame
  en:
    term: data frame
    def: >
      A two-dimensional data structure for storing tabular data in memory. Rows
      represent [records](#record) and columns represent [fields](#field).
  es:
    term: FIXME
    def: >
      FIXME

- key: data_migration
  en:
    term: data migration
    def: >
      Moving data from one location or format to another. The term refers to
      translating data from an old format to a newer one.
  es:
    term: FIXME
    def: >
      FIXME

- key: decorator_pattern
  en:
    term: Decorator pattern
    def: >
      A [design pattern](#design_pattern) in which a function adds additional
      features to another function or a [class](#class) after its initial
      definition. Decorators are a feature of Python and can be
      implemented in most other languages as well.
  es:
    term: FIXME
    def: >
      FIXME

- key: defensive_programming
  en:
    term: defensive programming
    def: >
      A set of programming practices that assumes mistakes will happen and
      either reports or corrects them, such as inserting
      [assertions](#assertion) to report situations that are not ever supposed
      to occur.
  es:
    term: FIXME
    def: >
      FIXME

- key: dependency
  en:
    term: dependency
    def: >
      See [prerequisite](#prerequisite).
  es:
    term: FIXME
    def: >
      FIXME

- key: dependency_graph
  en:
    term: dependency graph
    def: >
      A [directed graph](#directed_graph) showing how things depend on one
      another, such as the files to be updated by a [build
      manager](#build_manager). If the dependency graph is not [acyclic](#dag),
      the dependencies cannot be resolved.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: deprecation
  en:
    term: deprecation
    def: >
      To indicate that while a function, method, or class exists, its use is no
      longer recommended (for example, because it is going to be phased out in a
      future release).
  es:
    term: FIXME
    def: >
      FIXME

- key: depth_first
  en:
    term: depth-first
    def: >
      A search algorithm that explores one possibility all the way to its
      conclusion before moving on to the next.
  es:
    term: FIXME
    def: >
      FIXME

- key: derived_class
  ref:
  - child_class
  en:
    term: derived class
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).
  es:
    term: FIXME
    def: >
      FIXME

- key: design_by_contract
  ref:
  - liskov_substitution_principle
  en:
    term: design by contract
    def: >
      A style of designing software in which functions specify the
      [pre-conditions](#pre_condition) that must be true in order for them to
      run and the [post-conditions](#post_condition) they guarantee will be true
      when they return. A function can then be replaced by one with weaker
      pre-conditions (i.e., it accepts a wider set of input) and/or stronger
      post-conditions (i.e., it produces a smaller range of output) without
      breaking anything else.
  es:
    term: FIXME
    def: >
      FIXME

- key: design_pattern
  ref:
  - iterator_pattern
  - singleton_pattern
  - template_method_pattern
  - visitor_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a [library](#library).
  es:
    term: FIXME
    def: >
      FIXME

- key: destructuring_assignment
  en:
    term: destructuring assignment
    def: >
      Unpacking values from data structures and assigning them to multiple
      variables in a single statement.
  es:
    term: FIXME
    def: >
      FIXME

- key: dictionary
  en:
    term: dictionary
    def: >
      A data structure that allows items to be looked up by value, sometimes
      called an [associative array](#associative_array). Dictionaries are often
      implemented using [hash tables](#hash_table).
  es:
    term: FIXME
    def: >
      FIXME

- key: dag
  en:
    term: directed acyclic graph
    def: >
      A [directed graph](#directed_graph) which does not contain any loops
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).
    acronym: DAG
  es:
    term: FIXME
    def: >
      FIXME

- key: directed_graph
  en:
    term: directed graph
    def: >
      A [graph](#graph) whose [edges](#edge) have directions.
  es:
    term: FIXME
    def: >
      FIXME

- key: directory
  en:
    term: directory
    def: >
      A structure in a [filesystem](#filesystem) that contains references to
      other structures, such as files and other directories.
  es:
    term: FIXME
    def: >
      FIXME

- key: disassembler
  ref:
  - assembler
  en:
    term: disassembler
    def: >
      A program that translates machine instructions into [assembly
      code](#assembly_code) or some other higher-level language.
  es:
    term: FIXME
    def: >
      FIXME

- key: doc_comment
  en:
    term: doc comment
    def: >
      A documentation comment ("doc comment" for short) is a specially-formatted
      comment containing documentation about a piece of code that is embedded in
      the code itself.
  es:
    term: FIXME
    def: >
      FIXME

- key: dom
  en:
    term: Document Object Model
    def: >
      A standard, in-memory representation of [HTML](#html) and [XML](#xml).
      Each [element](#element) is stored as a [node](#node) in a [tree](#tree)
      with a set of named [attributes](#attribute); contained elements are
      [child nodes](#child_tree).
    acronym: DOM
  es:
    term: FIXME
    def: >
      FIXME

- key: driver
  en:
    term: driver
    def: >
      A program that runs other programs, or a function that drives all of the
      other functions in a program.
  es:
    term: FIXME
    def: >
      FIXME

- key: dynamic_loading
  en:
    term: dynamic loading
    def: >
      To [import](#import) a [module](#module) into the memory of a program
      while it is already running. Most [interpreted
      languages](#interpreted_language) use dynamic loading, and provide tools
      so that programs can find and load modules dynamically to configure
      themselves.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: dynamic_lookup
  en:
    term: dynamic lookup
    def: >
      To find a function or a property of an [object](#object) by name while a
      program is running. For example, instead of getting a specific property of
      an object using `obj.name`, a program might use `obj[someVariable]`, where
      `someVariable` could hold `"name"` or some other property name.
  es:
    term: FIXME
    def: >
      FIXME

- key: dynamic_scoping
  en:
    term: dynamic scoping
    def: >
      To find the value of a variable by looking at what is on the [call
      stack](#call_stack) at the moment the lookup is done. Almost all
      programming languages use [lexical-scoping](#lexical_scoping) instead,
      since it is more predictable.
  es:
    term: FIXME
    def: >
      FIXME

- key: eager_matching
  en:
    term: eager matching
    def: >
      Matching as much as possible, as early as possible.
  es:
    term: FIXME
    def: >
      FIXME

- key: easy_mode
  en:
    term: easy mode
    def: >
      A term borrowed from gaming meaning to do something with obstacles or
      difficulties simplified or removed, often for practice purposes.
  es:
    term: FIXME
    def: >
      FIXME

- key: edge
  en:
    term: edge
    def: >
      A connection between two [nodes](#node) in a [graph](#graph). An edge may
      have data associated with it, such as a name or distance.
  es:
    term: FIXME
    def: >
      FIXME

- key: edge_case
  en:
    term: edge case
    def: >
      A problem that only comes up under unusual circumstances or when a system
      is pushed to its limits; also sometimes called a [corner
      case](#corner_case). Programs intended for widespread use have to handle
      edge cases, but doing so can make them much more complicated.
  es:
    term: FIXME
    def: >
      FIXME

- key: element
  en:
    term: element
    def: >
      A named component in an [HTML](#html) or [XML](#xml) document. Elements
      are usually written `<name>`…`</name>`, where "…" represents the
      content of the element. Elements often have [attributes](#attribute).
  es:
    term: FIXME
    def: >
      FIXME

- key: encapsulate
  en:
    term: encapsulate
    def: >
      To store data inside some kind of structure so that it is only accessible
      through that structure.
  es:
    term: FIXME
    def: >
      FIXME

- key: entry_point
  en:
    term: entry point
    def: >
      Where a program begins executing.
  es:
    term: FIXME
    def: >
      FIXME

- key: environment
  en:
    term: environment
    def: >
      A structure that stores a set of variable names and the values they refer
      to.
  es:
    term: FIXME
    def: >
      FIXME

- key: error_test
  en:
    term: error (in a test)
    def: >
      Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know
      anything about the correctness of the system.
  es:
    term: FIXME
    def: >
      FIXME

- key: error_handling
  en:
    term: error handling
    def: >
      What a program does to detect and correct for errors. Examples include
      printing a message and using a default configuration if the user-specified
      configuration cannot be found.
  es:
    term: FIXME
    def: >
      FIXME

- key: event_loop
  en:
    term: event loop
    def: >
      A mechanism for managing concurrent activities in a program. Tasks are
      represented as items in a queue; the event loop repeatedly takes an item
      from the front of the queue and runs it, adding any other tasks it
      generates to the back of the queue to run later.
  es:
    term: FIXME
    def: >
      FIXME

- key: exception
  en:
    term: exception
    def: >
      An object that stores information about an error or other unusual event in
      a program. One part of a program will create and [raise an
      exception](#raise_exception) to signal that something unexpected has
      happened; another part will [catch](#catch_exception) it.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: exception_handler
  en:
    term: exception handler
    def: >
      A piece of code that deals with an [exception](#exception) after it is
      [caught](#catch_exception), e.g., by recording a message, retrying the
      operation that failed, or performing an alternate operation.
  es:
    term: FIXME
    def: >
      FIXME

- key: expected_result
  ref:
  - actual_result
  en:
    term: expected result (of test)
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.
  es:
    term: FIXME
    def: >
      FIXME

- key: exploratory_programming
  en:
    term: exploratory programming
    def: >
      A software development methodology in which requirements emerge or change
      as the software is being written, often in response to results from early
      runs.
  es:
    term: FIXME
    def: >
      FIXME

- key: export
  en:
    term: export
    def: >
      To make something visible outside a [module](#module) so that other parts
      of a program can [import](#import) it. In most languages a module must
      export things explicitly in an attempt to avoid [name
      collision](#name_collision).
  es:
    term: FIXME
    def: >
      FIXME

- key: fail_test
  ref:
  - pass_test
  en:
    term: fail (a test)
    def: >
      A test fails if the [actual result](#actual_result) does not match the
      [expected result](#expected_result).
  es:
    term: FIXME
    def: >
      FIXME

- key: feature_software
  en:
    term: feature (in software)
    def: >
      Some aspect of software that was deliberately designed or built. A
      [bug](#bug) is an undesired feature.
  es:
    term: FIXME
    def: >
      FIXME

- key: field
  en:
    term: field
    def: >
      A component of a [record](#record) containing a single value. Every record
      in a database [table](#table) has the same fields.
  es:
    term: FIXME
    def: >
      FIXME

- key: filename_extension
  en:
    term: filename extension
    def: >
      The last part of a filename, usually following the '.' symbol. Filename
      extensions are commonly used to indicate the type of content in the file,
      though there is no guarantee that this is correct.
  es:
    term: FIXME
    def: >
      FIXME

- key: filesystem
  en:
    term: filesystem
    def: >
      The part of the [operating system](#operating_system) that manages how
      files are stored and retrieved. Also used to refer to all of those files
      and [directories](#directory) or the specific way they are stored (as in
      "the Unix filesystem").
  es:
    term: FIXME
    def: >
      FIXME

- key: filter
  en:
    term: filter
    def: >
      As a verb, to choose a set of [records](#record) (i.e., rows of a table)
      based on the values they contain. As a noun, a command-line program that
      reads lines of text from files or [standard input](#stdin), performs some
      operation on them (such as filtering), and writes to a file or
      [stdout](#stdout).
  es:
    term: FIXME
    def: >
      FIXME

- key: fsm
  en:
    term: finite state machine
    def: >
      A theoretical model of computing consisting of a directed graph whose
      nodes represent the states of the computation and whose arcs show how
      to move from one state to another. Every [regular expression](#regular_expression)
      corresponds to a finite state machine.
    acronym: FSM
  es:
    term: FIXME
    def: >
      FIXME

- key: fixed_width_string
  en:
    term: fixed-width (of strings)
    def: >
      A set of character strings that have the same length. Databases often used
      fixed-width strings to make storage and access more efficient; short
      strings are [padded](#pad_string) up to the required length and long
      strings are truncated.
  es:
    term: FIXME
    def: >
      FIXME

- key: fixture
  en:
    term: fixture
    def: >
      The thing on which a test is run, such as the [parameters](#parameter) to
      the function being tested or the file being processed.
  es:
    term: FIXME
    def: >
      FIXME

- key: fluent_interface
  en:
    term: fluent interface
    def: >
      A style of object-oriented programming in which methods return objects so
      that other methods can immediately be called.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: folder
  en:
    term: folder
    def: >
      Another term for a [directory](#directory).
  es:
    term: FIXME
    def: >
      FIXME

- key: garbage_collection
  en:
    term: garbage collection
    def: >
      The process of identifying memory that has been allocated but is no longer
      in use and reclaiming it to be re-used.
  es:
    term: FIXME
    def: >
      FIXME

- key: generator_function
  ref:
  - iterator_pattern
  en:
    term: generator function
    def: >
      A function whose state is automatically saved when it returns a value so
      that execution can be restarted from that point the next time it is
      called. One example of generator functions use is to produce streams of
      values that can be processed by `for` loops.
  es:
    term: FIXME
    def: >
      FIXME

- key: generic_function
  en:
    term: generic function
    def: >
      A collection of functions with similar purpose, each operating on a
      different class of data.
  es:
    term: FIXME
    def: >
      FIXME

- key: global_variable
  ref:
  - local_variable
  en:
    term: global variable
    def: >
      A variable defined outside any particular function or [package](#package)
      namespace, which is therefore visible to all functions.
  es:
    term: FIXME
    def: >
      FIXME

- key: globbing
  en:
    term: globbing
    def: >
      To specify a set of filenames using a simplified form of [regular
      expressions](#regular_expression), such as `*.dat` to mean "all files
      whose names end in `.dat`". The name is derived from "global".
  es:
    term: FIXME
    def: >
      FIXME

- key: graph
  ref:
  - tree
  en:
    term: graph
    def: >
      A plot or a chart that displays data, or a data structure in which
      [nodes](#node) are connected to one another by [edges](#edge).
  es:
    term: FIXME
    def: >
      FIXME

- key: greedy_algorithm
  en:
    term: greedy algorithm
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.
  es:
    term: FIXME
    def: >
      FIXME

- key: handler
  en:
    term: handler
    def: >
      A [callback function](#callback) responsible for handling some particular
      event, such as the user clicking on a button or new data being receiving
      from a file.
  es:
    term: FIXME
    def: >
      FIXME

- key: hash_code
  en:
    term: hash code
    def: >
      A value generated by a [hash function](#hash_function). Good hash codes
      have the same properties as random numbers in order to reduce the
      frequency of [collisions](#collision).
  es:
    term: FIXME
    def: >
      FIXME

- key: hash_function
  en:
    term: hash function
    def: >
      A function that turns arbitrary data into a bit array, or a [key](#key),
      of a fixed size. Hash functions are used to determine where data should be
      stored in a [hash table](#hash_table).
  es:
    term: FIXME
    def: >
      FIXME

- key: hash_table
  en:
    term: hash table
    def: >
      A data structure that calculates a pseudo-random key (location) for each
      value passed to it and stores the value in that location. Hash tables
      enable fast lookup for arbitrary data. This occurs at the cost of extra
      memory because hash tables must always be larger than the amount of
      information they need to store, to avoid the possibility of data
      collisions, when the hash function returns the same key for two different
      values.
  es:
    term: FIXME
    def: >
      FIXME

- key: header_file
  en:
    term: header file
    def: >
      In C and C++, a file that defines constants and function
      [signatures](#signature) but does not contain runnable code. Header files
      tell the including file what is defined in other files so that the
      compiler can generate correct code.
  es:
    term: FIXME
    def: >
      FIXME

- key: heterogeneous
  ref:
  - homogeneous
  en:
    term: heterogeneous
    def: >
      Containing mixed data types. For example, an array in Javascript can
      contain a mix of numbers, character strings, and values of other types.
  es:
    term: FIXME
    def: >
      FIXME

- key: heuristic
  en:
    term: heuristic
    def: >
      A rule or guideline that isn't guaranteed to produce the desired result,
      but usually does.
  es:
    term: FIXME
    def: >
      FIXME

- key: homogeneous
  ref:
  - heterogeneous
  en:
    term: homogeneous
    def: >
      Containing a single data type. For example, a [vector](#vector) must be
      homogeneous: its values must all be numeric, logical, etc.
  es:
    term: FIXME
    def: >
      FIXME

- key: http_request
  ref:
  - http_response
  en:
    term: HTTP request
    def: >
      A message sent from a [client](#client) to a [server](#server) using the
      [HTTP](#http) [protocol](#protocol) asking for data. A request usually
      asks for a web page, image, or other data.
  es:
    term: FIXME
    def: >
      FIXME

- key: http_response
  en:
    term: HTTP response
    def: >
      A reply sent from a [server](#server) to a [client](#client) using the
      [HTTP](#http) [protocol](#protocol) in response to a
      [request](#http_request). The response usually contains a web page, image,
      or data.
  es:
    term: FIXME
    def: >
      FIXME

- key: html
  ref:
  - xml
  en:
    term: HyperText Markup Language
    def: >
      The standard [markup language](#markup_language) used for web pages. HTML
      is represented in memory using [DOM](#dom) (Digital Object Model).
    acronym: HTML
  es:
    term: FIXME
    def: >
      FIXME

- key: http
  en:
    term: HyperText Transfer Protocol
    def: >
      The standard [protocol](#protocol) for data transfer on the World-Wide
      Web. HTTP defines the format of [requests](#http_request) and
      [responses](#http_response), the meanings of standard error codes, and
      other features.
    acronym: HTTP
  es:
    term: FIXME
    def: >
      FIXME

- key: idiomatic
  en:
    term: idiomatic
    def: >
      To use a language in the same way as a fluent or native speaker. Programs
      are called idiomatic if they use the language the way that proficient
      programmers use it.
  es:
    term: FIXME
    def: >
      FIXME

- key: iife
  en:
    term: immediately-invoked function expression
    def: >
      A function that is invoked once at the point where it is defined.  IIFEs
      are typically used to create a [scope](#scope) to hide some function or
      variable definitions.
    acronym: IIFE
  es:
    term: FIXME
    def: >
      FIXME

- key: immutable
  en:
    term: immutable
    def: >
      Data that cannot be changed after being created. Immutable data is easier
      to think about, particularly if data structures are shared between several
      tasks, but may result in higher memory requirements.
  es:
    term: FIXME
    def: >
      FIXME

- key: import
  en:
    term: import
    def: >
      To bring things from a [module](#module) into a program for use. In most
      languages a program can only import things that the module explicitly
      [exports](#export).
  es:
    term: FIXME
    def: >
      FIXME

- key: index_database
  en:
    term: index (in a database)
    def: >
      An auxiliary data structure in a database used to speed up search for some
      entries. An index increases memory and disk requirements but reduces
      search time.
  es:
    term: FIXME
    def: >
      FIXME

- key: inner_function
  en:
    term: inner function
    def: >
      A function defined inside another (outer) function.  Creating and
      returning inner functions is a way to create [closures](#closure).
  es:
    term: FIXME
    def: >
      FIXME

- key: instance
  en:
    term: instance
    def: >
      An [object](#object) of a particular [class](#class).
  es:
    term: FIXME
    def: >
      FIXME

- key: instruction_pointer
  en:
    term: instruction pointer
    def: >
      A special [register](#register) in a processor that stores the address of
      the next instruction to execute.
  es:
    term: FIXME
    def: >
      FIXME

- key: instruction_set
  en:
    term: instruction set
    def: >
      The basic operations that a particular processor can execute directly.
  es:
    term: FIXME
    def: >
      FIXME

- key: interpreted_language
  en:
    term: interpreted language
    def: >
      A high-level language that is not executed directly by the computer, but
      instead is run by an [interpreter](#interpreter) that translates program
      instructions into machine commands on the fly.
  es:
    term: FIXME
    def: >
      FIXME

- key: interpreter
  en:
    term: interpreter
    def: >
      A program whose job it is to run programs written in a high-level
      [interpreted language](#interpreted_language). Interpreters can run
      interactively, but may also execute commands saved in a file.
  es:
    term: FIXME
    def: >
      FIXME

- key: intrinsic_complexity
  en:
    term: intrinsic complexity
    def: >
      The unavoidable complexity inherent in a problem that any solution must
      deal with. The term is used in contrast with
      [accidental complexity](#accidental_complexity).
  es:
    term: FIXME
    def: >
      FIXME

- key: introspection
  en:
    term: introspection
    def: >
      Having a program examine itself as it is running; common examples are to
      determine the specific class of a generic object or to get the fields of
      an object when they are not known in advance.
  es:
    term: FIXME
    def: >
      FIXME

- key: iso_date_format
  en:
    term: ISO date format
    def: >
      An international for formatting dates. While the full standard is complex,
      the most common form is `YYYY-MM-DD`, i.e., a four-digit year, a two-digit
      month, and a two-digit day, separated by hyphens.
  es:
    term: FIXME
    def: >
      FIXME

- key: iterator_pattern
  ref:
  - visitor_pattern
  en:
    term: Iterator pattern
    def: >
      A [design pattern](#design_pattern) in which a temporary [object](#object)
      or [generator function](#generator_function) produces each value from a
      collection in turn for processing. This pattern hides the differences
      between different kinds of data structures so that everything can be
      processed using loops.
  es:
    term: FIXME
    def: >
      FIXME

- key: json
  ref:
  - yaml
  en:
    term: JavaScript Object Notation
    def: >
      A way to represent data by combining basic values like numbers and
      character strings in [lists](#list) and [key/value](#dictionary)
      structures. The acronym stands for "JavaScript Object Notation"; unlike
      better-defined standards like [XML](#xml), it is unencumbered by a syntax
      for comments or ways to define a [schema](#schema).
    acronym: JSON
  es:
    term: FIXME
    def: >
      FIXME

- key: join
  en:
    term: join
    def: >
      An operation that combines two [tables](#table), typically by matching
      [keys](#key) from one with keys from another.
  es:
    term: FIXME
    def: >
      FIXME

- key: key
  en:
    term: key
    def: >
      A [field](#field) or combination of fields whose value(s) uniquely
      identify a [record](#record) within a [table](#table) or dataset. Keys are
      often used to select specific records and in [joins](#join).
  es:
    term: FIXME
    def: >
      FIXME

- key: label_address
  en:
    term: label (address in memory)
    def: >
      A human-readable name given to a particular location in memory when
      writing programs in [assembly code](#assembly_code).
  es:
    term: FIXME
    def: >
      FIXME

- key: layout_engine
  en:
    term: layout engine
    def: >
      A piece of software that decides where to place text, images, and other
      elements on a page.
  es:
    term: FIXME
    def: >
      FIXME

- key: lazy_matching
  ref:
  - eager_matching
  en:
    term: lazy matching
    def: >
      Matching as little as possible while still finding a valid match.
  es:
    term: FIXME
    def: >
      FIXME

- key: lru_cache
  en:
    term: Least Recently Used cache
    def: >
      A [cache](#cache) that discards items that have not been used recently in
      order to limit memory requirements.
    acronym: LRU cache
  es:
    term: FIXME
    def: >
      FIXME

- key: lexical_scoping
  en:
    term: lexical scoping
    def: >
      To look up the value associated with a name according to the textual
      structure of a program. Most programming languages use lexical scoping
      instead of [dynamic scoping](#dynamic_scoping) because the latter is less
      predictable.
  es:
    term: FIXME
    def: >
      FIXME

- key: library
  en:
    term: library
    def: >
      An installable collection of software, also often called a
      [module](#module) or [package](#package).
  es:
    term: FIXME
    def: >
      FIXME

- key: lifecycle
  en:
    term: lifecycle
    def: >
      The steps that something is allowed or required to go through. The
      lifecycle of an [object](#object) runs from its
      [construction](#constructor) through the operations it can or must perform
      before it is destroyed.
  es:
    term: FIXME
    def: >
      FIXME

- key: line_comment
  en:
    term: line comment
    def: >
      A [comment](#comment) in a program that spans part of a single line, as
      opposed to a [block comment](#block_comment) that may span multiple lines.
  es:
    term: FIXME
    def: >
      FIXME

- key: link
  en:
    term: link (a program)
    def: >
      To combine separately [compiled](#compile) modules into a single runnable
      program.
  es:
    term: FIXME
    def: >
      FIXME

- key: linter
  en:
    term: linter
    def: >
      A program that checks for common problems in software, such as violations
      of indentation rules or variable naming conventions. The name comes from
      the first tool of its kind, called `lint`.
  es:
    term: FIXME
    def: >
      FIXME

- key: liskov_substitution_principle
  en:
    term: Liskov Substitution Principle
    def: >
      A design rule stating that it should be possible to replace objects in a
      program with objects of derived classes without breaking the program.
      [Design by contract](#design_by_contract) is intended to enforce this rule.
  es:
    term: FIXME
    def: >
      FIXME

- key: list
  en:
    term: list
    def: >
      A [vector](#vector) that can contain values of many different
      ([heterogeneous](#heterogeneous)) types.
  es:
    term: FIXME
    def: >
      FIXME

- key: literal
  en:
    term: literal
    def: >
      A representation of a fixed value in a program, such as the digits `123`
      for the number 123 or the characters `"abc"` for the string containing
      those three letters.
  es:
    term: FIXME
    def: >
      FIXME

- key: literate_programming
  en:
    term: literate programming
    def: >
      A programming paradigm that mixes prose and code so that explanations
      and instructions are side by side.
  es:
    term: FIXME
    def: >
      FIXME

- key: loader
  en:
    term: loader
    def: >
      A function whose job is to read files containing runnable code into memory
      and make that code available to the calling program.
  es:
    term: FIXME
    def: >
      FIXME

- key: local_variable
  ref:
  - closure
  - global_variable
  en:
    term: local variable
    def: >
      A variable defined inside a function which is only visible within that
      function.
  es:
    term: FIXME
    def: >
      FIXME

- key: log_message
  en:
    term: log message
    def: >
      A status report or error message written to a file as a program runs.
  es:
    term: FIXME
    def: >
      FIXME

- key: loop_body
  en:
    term: loop body
    def: >
      The statement or statements executed by a loop.
  es:
    term: FIXME
    def: >
      FIXME

- key: loosely_coupled
  ref:
  - tightly_coupled
  en:
    term: loosely coupled
    def: >
      Components in a software system are said to be loosely coupled if they are
      relatively independent of one another, i.e., if any one of them can be
      changed or replaced without others having to be altered as well.
  es:
    term: FIXME
    def: >
      FIXME

- key: macro
  en:
    term: macro
    def: >
      Originally short for "macro-instruction", an instruction to translate some
      of the text into a program into other text before using it.
  es:
    term: FIXME
    def: >
      FIXME

- key: makefile
  en:
    term: Makefile
    def: >
      A configuration file for the original [build manager](#build_manager).
  es:
    term: FIXME
    def: >
      FIXME

- key: manifest
  en:
    term: manifest
    def: >
      A list that specifies the precise versions of a complete set of libraries
      or other software components.
  es:
    term: FIXME
    def: >
      FIXME

- key: markdown
  en:
    term: Markdown
    def: >
      A [markup language](#markup_language) with a simple syntax intended as a
      replacement for [HTML](#html).
  es:
    term: FIXME
    def: >
      FIXME

- key: markup_language
  ref:
  - xml
  en:
    term: markup language
    def: >
      A set of rules for annotating text to define its meaning or how it should
      be displayed. The markup is usually not displayed, but instead controls
      how the underlying text is interpreted or shown. [Markdown](#markdown) and
      [HTML](#html) are widely-used markup languages for web pages.
  es:
    term: FIXME
    def: >
      FIXME

- key: method
  en:
    term: method
    def: >
      An implementation of a [generic function](#generic_function) that handles
      objects of a specific class.
  es:
    term: FIXME
    def: >
      FIXME

- key: method_chaining
  en:
    term: method chaining
    def: >
      A style of object-oriented programming in which an object's methods return
      that object as their result so that another method can immediately be
      called, as in `obj.a().b().c()`.
  es:
    term: FIXME
    def: >
      FIXME

- key: mock_object
  en:
    term: mock object
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.
  es:
    term: FIXME
    def: >
      FIXME

- key: module
  en:
    term: module
    def: >
      A reusable software [package](#package), also often called a
      [library](#library).
  es:
    term: FIXME
    def: >
      FIXME

- key: module_bundler
  en:
    term: module bundler
    def: >
      A program that finds all the dependencies of a set of source files and
      combines them into a single loadable file.
  es:
    term: FIXME
    def: >
      FIXME

- key: multi_threaded
  en:
    term: multi-threaded
    def: >
      Capable of performing several operations simultaneously. Multi-threaded
      programs are usually more efficient than
      [single-threaded](#single_threaded) ones, but also harder to understand
      and debug.
  es:
    term: FIXME
    def: >
      FIXME

- key: name_collision
  ref:
  - call_stack
  en:
    term: name collision
    def: >
      The ambiguity that arises when two or more things in a program that have
      the same name are active at the same time. Most languages use
      [namespaces](#namespace) to prevent such collisions.
  es:
    term: FIXME
    def: >
      FIXME

- key: namespace
  ref:
  - name_collision
  - scope
  en:
    term: namespace
    def: >
      A collection of names in a program that exists in isolation from other
      namespaces. Each function, [object](#object), [class](#class), or
      [module](#module) in a program typically has its own namespace so that
      references to "X" in one part of a program do not accidentally refer to
      something called "X" in another part of the program. Scope is a distinct,
      but related, concept.
  es:
    term: FIXME
    def: >
      FIXME

- key: nested_function
  en:
    term: nested function
    def: >
      A function that is defined inside another function.
  es:
    term: FIXME
    def: >
      FIXME

- key: node
  en:
    term: node
    def: >
      An element of a [graph](#graph) that is connected to other nodes by
      [edges](#edge). Nodes typically have data associated with them, such as
      names or weights.
  es:
    term: FIXME
    def: >
      FIXME

- key: non_blocking_execution
  en:
    term: non-blocking execution
    def: >
      To allow a program to continue running while an operation is in progress.
      For example, many systems support non-blocking execution for file I/O so
      that the program can continue doing work while it waits for data to be
      read from or written to the [filesystem](#filesystem) (which is typically
      much slower than the CPU).
  es:
    term: FIXME
    def: >
      FIXME

- key: object
  en:
    term: object
    def: >
      In [object-oriented programming](#oop), a structure that contains the data
      for a specific instance of a [class](#class). The operations the object is
      capable of are defined by the class's [methods](#method).
  es:
    term: FIXME
    def: >
      FIXME

- key: oop
  en:
    term: object-oriented programming
    def: >
      A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined
      interfaces.
    acronym: OOP
  es:
    term: FIXME
    def: >
      FIXME

- key: off_by_one_error
  en:
    term: off-by-one error
    def: >
      A common error in programming in which the program refers to element `i`
      of a structure when it should refer to element `i-1` or `i+1`, or
      processes `N` elements when it should process `N-1` or `N+1`.
  es:
    term: FIXME
    def: >
      FIXME

- key: op_code
  en:
    term: op code
    def: >
      The numerical code for a particular instruction that a processor can
      execute.
  es:
    term: FIXME
    def: >
      FIXME

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: operating_system
  en:
    term: operating system
    def: >
      A program that provides a standard interface to whatever hardware it is
      running on. Theoretically, any program that only interacts with the
      operating system should run on any computer that operating system runs on.
  es:
    term: FIXME
    def: >
      FIXME

- key: package
  en:
    term: package
    def: >
      A collection of code, data, and documentation that can be distributed and
      re-used. Also referred to in some languages as a [library](#library) or
      [module](#module).
  es:
    term: FIXME
    def: >
      FIXME

- key: pad_string
  en:
    term: pad (a string)
    def: >
      To add extra characters to a string to make it a required length.
  es:
    term: FIXME
    def: >
      FIXME

- key: parameter
  ref:
  - argument
  en:
    term: parameter
    def: >
      A variable specified in a function definition that is assigned a value
      when the function is called.
  es:
    term: FIXME
    def: >
      FIXME

- key: parent_tree
  en:
    term: parent (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is above another node (called a
      [child](#child_tree)). Every node in a tree except the [root
      node](#root_tree) has a single parent.
  es:
    term: FIXME
    def: >
      FIXME

- key: parent_class
  en:
    term: parent class
    def: >
      In [object-oriented programming](#oop), the [class](#class) from which a
      sub class (called the [child class](#child_class)) is derived.
  es:
    term: FIXME
    def: >
      FIXME

- key: parser
  en:
    term: parser
    def: >
      A piece of software that translates a textual representation of something
      into a data structure. For example, a [YAML](#yaml) parser reads indented
      text and produces nested lists and objects.
  es:
    term: FIXME
    def: >
      FIXME

- key: pass_test
  ref:
  - fail_test
  en:
    term: pass (a test)
    def: >
      A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).
  es:
    term: FIXME
    def: >
      FIXME

- key: patch
  en:
    term: patch
    def: >
      A single file containing a set of changes to a set of files, separated by
      markers that indicate where each individual change should be applied.
  es:
    term: FIXME
    def: >
      FIXME

- key: path
  ref:
  - absolute_path
  - relative_path
  en:
    term: path (in filesystem)
    def: >
      A [string](#string) that specifies a location in a
      [filesystem](#filesystem). In Unix, the [directories](#directory) in a
      path are joined using `/`.
  es:
    term: FIXME
    def: >
      FIXME

- key: pattern_rule
  en:
    term: pattern rule
    def: >
      A generic [build rule](#build_rule) that describes how to update any file
      whose name matches a pattern. Pattern rules often use [automatic
      variables](#automatic_variable) to represent the actual filenames.
  es:
    term: FIXME
    def: >
      FIXME

- key: pipe
  en:
    term: pipe
    def: >
      To use the output of one computation as the input for the next, or the
      connection between the two computations responsible for the data transfer.
      Pipes were popularized by the [Unix shell](#shell), and are now used in
      many different programming languages and systems.
  es:
    term: FIXME
    def: >
      FIXME

- key: pipe_shell
  en:
    term: pipe (in the Unix shell)
    def: >
      The `|` used to make the output of one command the input of the next.
  es:
    term: FIXME
    def: >
      FIXME

- key: plugin_architecture
  en:
    term: plugin architecture
    def: >
      A style of application design in which the main program loads and runs
      small independent modules that do the bulk of the work.
  es:
    term: FIXME
    def: >
      FIXME

- key: polymorphism
  en:
    term: polymorphism
    def: >
      Having many different implementations of the same interface. If a set of
      functions or objects are polymorphic, they can be called interchangeably.
  es:
    term: FIXME
    def: >
      FIXME

- key: post_condition
  ref:
  - design_by_contract
  - pre_condition
  en:
    term: post-condition
    def: >
      Something that is guaranteed to be true after a function runs
      successfully. Post-conditions are often expressed as
      [assertions](#assertion) that are guaranteed to be be true of a function's
      results.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: pre_condition
  ref:
  - design_by_contract
  - post_condition
  en:
    term: pre-condition
    def: >
      Something that must be true before a function runs in order for it to
      work correctly. Pre-conditions are often expressed as as
      [assertions](#assertion) that must be true of a function's inputs in
      order for it to run successfully.
  es:
    term: FIXME
    def: >
      FIXME

- key: precedence
  en:
    term: precedence
    def: >
      The priority of an operation. For example, multiplication has a higher
      precedence than addition, so `a+b*c` is read as "the sum of `a` with the
      product of `b` and `c`".
  es:
    term: FIXME
    def: >
      FIXME

- key: prerequisite
  ref:
  - dependency
  en:
    term: prerequisite
    def: >
      Something that a [build target](#build_target) depends on.
  es:
    term: FIXME
    def: >
      FIXME

- key: process
  en:
    term: process
    def: >
      An [operating system](#operating_system)'s representation of a running
      program. A process typically has some memory, the identity of the user who
      is running it, and a set of connections to open files.
  es:
    term: FIXME
    def: >
      FIXME

- key: promise
  ref:
  - promisification
  en:
    term: promise
    def: >
      A way to represent the result of a delayed or
      [asynchronous](#asynchronous) computation. A promise is a placeholder for
      a value that will eventually be computed; any attempt to read the value
      before it is available blocks, while any such attempt after the
      computation finishes acts like a normal read.
  es:
    term: FIXME
    def: >
      FIXME

- key: promisification
  en:
    term: promisification
    def: >
      In JavaScript, the act of wrapping a callback function in a
      [promise](#promise) for uniform asynchronous execution.
  es:
    term: FIXME
    def: >
      FIXME

- key: protocol
  en:
    term: protocol
    def: >
      Any standard specifying how two pieces of software interact. A network
      protocol such as [HTTP](#http) defines the messages that
      [clients](#client) and [servers](#server) exchange on the World-Wide Web;
      [object-oriented](#oop) programs often define protocols for interactions
      between [objects](#object) of different [classes](#class).
  es:
    term: FIXME
    def: >
      FIXME

- key: prune
  en:
    term: prune
    def: >
      To remove branches and nodes from a tree, or to rule out
      partially-complete solutions when searching for an overall solution in
      order to reduce work.
  es:
    term: FIXME
    def: >
      FIXME

- key: pseudo_random_number
  en:
    term: pseudo-random number
    def: >
      A value generated in a repeatable way that resembles the true randomness
      of the universe well enough to fool observers.
  es:
    term: FIXME
    def: >
      FIXME

- key: prng
  ref:
  - seed
  en:
    term: pseudo-random number generator
    def: >
      A function that can generate [pseudo-random
      numbers](#pseudo_random_number).
    acronym: PRNG
  es:
    term: FIXME
    def: >
      FIXME

- key: query_selector
  en:
    term: query selector
    def: >
      A pattern that specifies a set of [DOM](#dom) nodes.  Query selectors are
      used in [CSS](#css) to specify the elements that rules apply to, or by
      JavaScript programs to manipulate web pages.
  es:
    term: FIXME
    def: >
      FIXME

- key: query_string
  en:
    term: query string
    def: >
      The portion of a [URL](#url) after the question mark `?` that specifies
      extra parameters for the [HTTP request](#http_request) as name-value
      pairs.
  es:
    term: FIXME
    def: >
      FIXME

- key: race_condition
  en:
    term: race condition
    def: >
      A situation in which a result depends on the order in which two or more
      concurrent operations are carried out.
  es:
    term: FIXME
    def: >
      FIXME

- key: raise_exception
  ref:
  - throw_exception
  en:
    term: raise (an exception)
    def: >
      To signal that something unexpected or unusual has happened in a program
      by creating an [exception](#exception) and handing it to the
      [error-handling](#error_handling) system, which then tries to find a point
      in the program that will [catch](#catch_exception) it.
  es:
    term: FIXME
    def: >
      FIXME

- key: repl
  en:
    term: read-eval-print loop
    def: >
      An interactive program that reads a command typed in by a user, executes
      it, prints the result, and then waits patiently for the next command.
      REPLs are often used to explore new ideas, or for debugging.
    acronym: REPL
  es:
    term: FIXME
    def: >
      FIXME

- key: record
  en:
    term: record
    def: >
      A group of related values that are stored together. A record may be
      represented as a [tuple](#tuple) or as a row in a [table](#table); in the
      latter case, every record in the table has the same [fields](#field).
  es:
    term: FIXME
    def: >
      FIXME

- key: register
  en:
    term: register
    def: >
      A small piece of memory (typically one [word](#word_memory) long) built
      into a processor that operations can refer to directly.
  es:
    term: FIXME
    def: >
      FIXME

- key: regular_expression
  en:
    term: regular expression
    def: >
      A pattern for matching text, written as text itself. Regular expressions
      are sometimes called "regexp", "regex", or "RE", and are powerful tools
      for working with text.
  es:
    term: FIXME
    def: >
      FIXME

- key: relational_database
  ref:
  - sql
  en:
    term: relational database
    def: >
      A database that organizes information into [tables](#table), each of which
      has a fixed set of named [fields](#field) (shown as columns) and a
      variable number of [records](#record) (shown as rows).
  es:
    term: FIXME
    def: >
      FIXME

- key: relative_error
  en:
    term: relative error
    def: >
      The absolute value of the difference between the actual and correct value
      divided by the correct value. For example, if the actual value is 9 and
      the correct value is 10, the relative error is 0.1. Relative error is
      usually more useful than [absolute error](#absolute_error).
  es:
    term: FIXME
    def: >
      FIXME

- key: relative_path
  ref:
  - absolute_path
  en:
    term: relative path
    def: >
      A path that is interpreted relative to some other location, such as the
      [current working directory](#current_working_directory). A relative path
      is the equivalent of giving directions using terms like "straight" and
      "left".
  es:
    term: FIXME
    def: >
      FIXME

- key: root_tree
  en:
    term: root (in a tree)
    def: >
      The [node](#node) in a [tree](#tree) of which all other nodes are direct
      or indirect [children](#child_tree), or equivalently the only node in the
      tree that has no [parent](#parent_tree).
  es:
    term: FIXME
    def: >
      FIXME

- key: row_major
  ref:
  - column_major
  en:
    term: row-major storage
    def: >
      Storing each row of a two-dimensional array as one block of memory so that
      elements in the same column are far apart.
  es:
    term: FIXME
    def: >
      FIXME

- key: runnable_documentation
  en:
    term: runnable documentation
    def: >
      Statements about code that can be executed to check their correctness,
      such as [assertions](#assertion) or [type
      declarations](#type_declaration).
  es:
    term: FIXME
    def: >
      FIXME

- key: sandbox
  en:
    term: sandbox
    def: >
      A testing environment that is separate from the production system, or an
      environment that is only allowed to perform a restricted set of operations
      for security reasons.
  es:
    term: FIXME
    def: >
      FIXME

- key: sat_solver
  en:
    term: SAT solver
    def: >
      A library or application that determines whether there is an assignment of
      true and false to a set of [Boolean](#boolean) variables that makes an
      expression true (i.e., that satisfies the expression).
  es:
    term: FIXME
    def: >
      FIXME

- key: schema
  en:
    term: schema
    def: >
      A specification of the format of a dataset, including the name, format,
      and content of each [table](#table).
  es:
    term: FIXME
    def: >
      FIXME

- key: scope
  ref:
  - closure
  - global_variable
  - local_variable
  - namespace
  en:
    term: scope
    def: >
      The portion of a program within which a definition can be seen and used.
  es:
    term: FIXME
    def: >
      FIXME

- key: scope_creep
  en:
    term: scope creep
    def: >
      Slow but steady increase in a project's goals after the project starts.
  es:
    term: FIXME
    def: >
      FIXME

- key: scoring_function
  en:
    term: scoring function
    def: >
      A function that measures or estimates how good a solution to a problem is.
  es:
    term: FIXME
    def: >
      FIXME

- key: search_path
  en:
    term: search path
    def: >
      The list of directories that a program searches to find something. For
      example, the Unix [shell](#shell) uses the search path stored in the
      `PATH` variable when trying to find a program whose name it has been
      given.
  es:
    term: FIXME
    def: >
      FIXME

- key: seed
  en:
    term: seed
    def: >
      A value used to initialize a [pseudo-random number generator](#prng).
  es:
    term: FIXME
    def: >
      FIXME

- key: semantic_versioning
  en:
    term: semantic versioning
    def: >
      A standard for identifying software releases. In the version identifier
      `major.minor.patch`, `major` changes when a new version of software is
      incompatible with old versions, `minor` changes when new features are
      added to an existing version, and `patch` changes when small [bugs](#bug)
      are fixed.
  es:
    term: FIXME
    def: >
      FIXME

- key: server
  en:
    term: server
    def: >
      Typically, a program such as a database manager or web server that
      provides data to a [client](#client) upon request.
  es:
    term: FIXME
    def: >
      FIXME

- key: sha_1
  en:
    term: SHA-1 hash
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 160-bit output.
  es:
    term: FIXME
    def: >
      FIXME

- key: shell
  en:
    term: shell
    def: >
      A [command-line interface](#cli) that allows a user to interact with the
      [operating system](#operating_system), such as Bash (for Unix and MacOS)
      or PowerShell (for Windows).
  es:
    term: FIXME
    def: >
      FIXME

- key: shell_variable
  en:
    term: shell variable
    def: >
      A variable set and used in the [Unix shell](#shell). Commonly-used shell
      variables include `HOME` (the user's home directory) and `PATH` (their
      [search path](#search_path)).
  es:
    term: FIXME
    def: >
      FIXME

- key: side_effect
  en:
    term: side effect
    def: >
      A change made by a function while it runs that is visible after the
      function finishes, such as modifying a [global variable](#global_variable)
      or writing to a file. Side effects make programs harder for people to
      understand, since the effects are not necessarily clear at the point in
      the program where the function is called.
  es:
    term: FIXME
    def: >
      FIXME

- key: signature
  en:
    term: signature
    def: >
      The set of parameters (with types or meaning) that characterize the
      calling interface of a function or set of functions. Two functions with
      the same signature can be called interchangeably.
  es:
    term: FIXME
    def: >
      FIXME

- key: single_threaded
  en:
    term: single-threaded
    def: >
      A model of program execution in which only one thing can happen at a time.
      Single-threaded execution is easier for people to understand, but less
      efficient than [multi-threaded](#multi_threaded) execution.
  es:
    term: FIXME
    def: >
      FIXME

- key: singleton
  ref:
  - singleton_pattern
  en:
    term: singleton
    def: >
      A set with only one element, or a [class](#class) with only one
      [instance](#instance).
  es:
    term: FIXME
    def: >
      FIXME

- key: singleton_pattern
  en:
    term: Singleton pattern
    def: >
      A [design pattern](#design_pattern) that creates a [singleton](#singleton)
      [object](#object) to manage some resource or service, such as a database
      or [cache](#cache). In [object-oriented programming](#oop), the pattern is
      usually implemented by hiding the [constructor](#constructor) of the
      [class](#class) in some way so that it can only be called once.
  es:
    term: FIXME
    def: >
      FIXME

- key: slug
  en:
    term: slug
    def: >
      An abbreviated portion of a page's URL that uniquely identifies it. In the
      example `https://www.mysite.com/category/post-name`, the slug is
      `post-name`.
  es:
    term: FIXME
    def: >
      FIXME

- key: source_map
  en:
    term: source map
    def: >
      A table used to translate a piece of code back to the lines in the
      original source.
  es:
    term: FIXME
    def: >
      FIXME

- key: sparse_matrix
  en:
    term: sparse matrix
    def: >
      A matrix in which most of the values are zero (or some other value).
      Rather than storing many copies of the same values, programs will often
      use a special data structure that only stores the "interesting" values.
  es:
    term: FIXME
    def: >
      FIXME

- key: sql
  en:
    term: SQL
    def: >
      The language used for writing queries for a [relational
      database](#relational_database). The term was originally an acronym for
      Structured Query Language.
  es:
    term: FIXME
    def: >
      FIXME

- key: stack_frame
  en:
    term: stack frame
    def: >
      A section of the [call stack](#call_stack) that records details of a
      single call to a specific function.
  es:
    term: FIXME
    def: >
      FIXME

- key: build_stale
  en:
    term: stale (in build)
    def: >
      To be out-of-date compared to a [prerequisite](#prerequisite). A [build
      manager](#build_manager)'s job is to find and update things that are
      stale.
  es:
    term: FIXME
    def: >
      FIXME

- key: stderr
  ref:
  - stdin
  - stdout
  en:
    term: standard error
    def: >
      A predefined communication channel for a [process](#process) typically
      used to report errors.
  es:
    term: FIXME
    def: >
      FIXME

- key: stdin
  ref:
  - stderr
  - stdout
  en:
    term: standard input
    def: >
      A predefined communication channel for a [process](#process), typically
      used to read input from the keyboard or from the previous process in a
      [pipe](#pipe_shell).
  es:
    term: FIXME
    def: >
      FIXME

- key: stdout
  ref:
  - stderr
  - stdin
  en:
    term: standard output
    def: >
      A predefined communication channel for a [process](#process), typically
      used to send output to the screen or to the next process in a
      [pipe](#pipe_shell).
  es:
    term: FIXME
    def: >
      FIXME

- key: static_site_generator
  en:
    term: static site generator
    def: >
      A software tool that creates HTML pages from templates and content.
  es:
    term: FIXME
    def: >
      FIXME

- key: stream
  en:
    term: stream
    def: >
      A sequential flow of data, such as the [bits](#bit) arriving across a
      network connection or the bytes read from a file.
  es:
    term: FIXME
    def: >
      FIXME

- key: streaming_api
  en:
    term: streaming API
    def: >
      An [API](#api) that processes data in chunks rather than needing to have
      all of it in memory at once. Streaming APIs usually require
      [handlers](#handler) for events such as "start of data", "next block", and
      "end of data".
  es:
    term: FIXME
    def: >
      FIXME

- key: string
  en:
    term: string
    def: >
      A block of text in a program. The term is short for "character string".
  es:
    term: FIXME
    def: >
      FIXME

- key: string_interpolation
  en:
    term: string interpolation
    def: >
      The process of inserting text corresponding to specified values into a
      [string](#string), usually to make output human-readable.
  es:
    term: FIXME
    def: >
      FIXME

- key: synchronous
  ref:
  - asynchronous
  en:
    term: synchronous
    def: >
      To happen at the same time. In programming, synchronous operations are
      ones that have to run simultaneously, or complete at the same time.
  es:
    term: FIXME
    def: >
      FIXME

- key: tab_completion
  en:
    term: tab completion
    def: >
      A technique implemented by most [REPLs](#repl), [shells](#shell), and
      programming editors that completes a command, variable name, filename, or
      other text when the TAB key is pressed.
  es:
    term: FIXME
    def: >
      FIXME

- key: table
  en:
    term: table
    def: >
      A set of [records](#record) in a [relational
      database](#relational_database) or [data frame](#data_frame).
  es:
    term: FIXME
    def: >
      FIXME

- key: tagged_data
  en:
    term: tagged data
    def: >
      A technique for storing data in a two-part structure, where one part
      identifies the type and the other part stores the bits making up the
      value.
  es:
    term: FIXME
    def: >
      FIXME

- key: template_method_pattern
  en:
    term: Template Method pattern
    def: >
      A [design pattern](#design_pattern) in which a [parent
      class](#parent_class) defines an overall sequence of operations by calling
      [abstract methods](#abstract_method) that [child classes](#child_class)
      must then implement. Each child class then behaves in the same general
      way, but implements the steps differently.
  es:
    term: FIXME
    def: >
      FIXME

- key: test_harness
  en:
    term: test harness
    def: >
      A program written to test some other program or set of functions,
      typically to measure their performance.
  es:
    term: FIXME
    def: >
      FIXME

- key: test_runner
  en:
    term: test runner
    def: >
      A program that finds and runs software tests and reports their results.
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: test_subject
  en:
    term: test subject
    def: >
      The thing being tested, sometimes also called the system under test (SUT).
  es:
    term: FIXME
    def: >
      FIXME

- key: tdd
  en:
    term: test-driven development
    def: >
      A programming practice in which tests are written before a new feature is
      added or a [bug](#bug) is fixed in order to clarify the goal.
    acronym: TDD
  es:
    term: FIXME
    def: >
      FIXME

- key: throw_exception
  en:
    term: throw (exception)
    def: >
      Another term for [raising](#raise_exception) an exception.
  es:
    term: FIXME
    def: >
      FIXME

- key: tightly_coupled
  ref:
  - loosely_coupled
  en:
    term: tightly coupled
    def: >
      Components in a software system are said to be tightly coupled if they
      depend on each other's internals, so that if one is altered then others
      have to be altered as well.
  es:
    term: FIXME
    def: >
      FIXME

- key: timestamp
  en:
    term: timestamp
    def: >
      A digital identifier showing the time at which something was created or
      accessed. Timestamps should use [ISO date format](#iso_date_format) for
      portability.
  es:
    term: FIXME
    def: >
      FIXME

- key: toctou
  en:
    term: Time of check/time of use
    def: >
      A [race condition](#race_condition) in which a process checks the state of
      something and then operates on it, but some other process might alter that
      state between the check and the operation.
    acronym: ToCToU
  es:
    term: FIXME
    def: >
      FIXME

- key: token
  en:
    term: token
    def: >
      An indivisible unit of text for a parser, such as a variable name or a
      number. Exactly what constitutes a token depends on the language.
  es:
    term: FIXME
    def: >
      FIXME

- key: topological_order
  en:
    term: topological order
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph) that respects the
      direction of its [edges](#edge), i.e., if there is an edge from node A to
      node B, A comes before B in the ordering. There may be many topological
      orderings of a particular graph.
  es:
    term: FIXME
    def: >
      FIXME

- key: transitive_closure
  en:
    term: transitive closure
    def: >
      The set of all [nodes](#node) in a [graph](#graph) that are reachable from
      a starting node, either directly or indirectly.
  es:
    term: FIXME
    def: >
      FIXME

- key: tree
  en:
    term: tree
    def: >
      A [graph](#graph) in which every node except the [root](#root_tree) has
      exactly one [parent](#parent_tree).
  es:
    term: FIXME
    def: >
      FIXME

- key: tuple
  en:
    term: tuple
    def: >
      A value that has a fixed number of parts, such as the three color
      components of a red-green-blue color specification.
  es:
    term: FIXME
    def: >
      FIXME

- key: turing_machine
  en:
    term: Turing Machine
    def: >
      A theoretical model of computation that manipulates symbols on an infinite
      tape according to a fixed table of rules. Any computation that can be
      expressed as an algorithm can be done by a Turing Machine.
  es:
    term: FIXME
    def: >
      FIXME

- key: two_hard_problems
  en:
    term: two hard problems in computer science
    def: >
      Refers to a quote by Phil Karlton: "There are only two hard problems in
      computer science—cache invalidation and naming things." Many variations
      add a third problem as a joke, such as [off-by-one errors](#off_by_one_error).
  es:
    term: FIXME
    def: >
      FIXME

- key: type_declaration
  en:
    term: type declaration
    def: >
      A statement in a program that a variable or value has a particular data
      type. Languages like Java require type declarations for all variables;
      they are optional in TypeScript and Python, and not allowed in pure
      JavaScript.
  es:
    term: FIXME
    def: >
      FIXME

- key: unicode
  en:
    term: Unicode
    def: >
      A standard that defines numeric codes for many thousands of characters and
      symbols. Unicode does not define how those numbers are stored; that is
      done by standards like [UTF-8](#utf_8).
  es:
    term: FIXME
    def: >
      FIXME

- key: url
  en:
    term: Uniform Resource Locator
    def: >
      A unique address on the World-Wide Web. URLs originally identified web
      pages, but may also represent datasets or database queries, particularly
      if they include a [query string](#query_string).
    acronym: URL
  break: true
  es:
    term: FIXME
    def: >
      FIXME

- key: unit_test
  en:
    term: unit test
    def: >
      A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).
  es:
    term: FIXME
    def: >
      FIXME

- key: utf_8
  en:
    term: UTF-8
    def: >
      A way to store the numeric codes representing [Unicode](#unicode)
      characters in memory that is [backward-compatible](#backward_compatible)
      with the older [ASCII](#ascii) standard.
  es:
    term: FIXME
    def: >
      FIXME

- key: vector
  en:
    term: vector
    def: >
      A sequence of values, usually of [homogeneous](#homogeneous) type.
  es:
    term: FIXME
    def: >
      FIXME

- key: version_control_system
  en:
    term: version control system
    def: >
      A system for managing changes made to software during its development.
  es:
    term: FIXME
    def: >
      FIXME

- key: virtual_machine
  en:
    term: virtual machine
    def: >
      A program that pretends to be a computer. This may seem a bit redundant,
      but VMs are quick to create and start up, and changes made inside the
      virtual machine are contained within that VM so we can install new
      [packages](#package) or run a completely different operating system
      without affecting the underlying computer.
  es:
    term: FIXME
    def: >
      FIXME

- key: visitor_pattern
  ref:
  - iterator_pattern
  en:
    term: Visitor pattern
    def: >
      A [design pattern](#design_pattern) in which the operation to be done is
      taken to each element of a data structure in turn. It is usually
      implemented by having a generator "visitor" that knows how to reach the
      structure's elements, which is given a function or method to call for each
      in turn, and that carries out the specific operation.
  es:
    term: FIXME
    def: >
      FIXME

- key: walk_tree
  en:
    term: walk (a tree)
    def: >
      To visit each [node](#node) in a [tree](#tree) in some order, typically
      [depth-first](#depth_first) or [breadth-first](#breadth_first).
  es:
    term: FIXME
    def: >
      FIXME

- key: watchpoint
  ref:
  - breakpoint
  en:
    term: watchpoint
    def: >
      An instruction for a debugger telling it to suspect execution whenever the
      value of a variable (or more generally an expression) changes.
  es:
    term: FIXME
    def: >
      FIXME

- key: well_formed
  en:
    term: well formed
    def: >
      A piece of text that obeys the rules of a formal grammar is said to be
      well formed.
  es:
    term: FIXME
    def: >
      FIXME

- key: word_memory
  en:
    term: word (of memory)
    def: >
      The unit of memory that a particular processor most naturally works with.
      While a byte is a fixed size (8 bits), a word may be 16, 32, or 64 bits
      long depending on the processor.
  es:
    term: FIXME
    def: >
      FIXME

- key: xml
  en:
    term: XML
    def: >
      A set of rules for defining [HTML](#html)-like tags and using them to
      format documents (typically data). XML was popular in the early 2000s, but
      its complexity led many programmers to adopt [JSON](#json), instead.
  es:
    term: FIXME
    def: >
      FIXME

- key: yaml
  en:
    term: YAML
    def: >
      Short for "YAML Ain't Markup Language", a way to represent nested data
      using indentation rather than the parentheses and commas of [JSON](#json).
      YAML is often used in configuration files and to define
      [parameters](#parameter) for various flavors of [Markdown](#markdown)
      documents.
  es:
    term: FIXME
    def: >
      FIXME

- key: z_buffering
  en:
    term: z-buffering
    def: >
      A drawing method that keeps track of the depth of what lies "under" each
      pixel so that it displays whatever is nearest to the observer.
  es:
    term: FIXME
    def: >
      FIXME
